(()=>{"use strict";function e(){return function(e){for(var t=120,n=e.split("\n"),r=[];n.length>0;){var a=n.shift();0===(a=a.trim()).length||(/^#BPM=[0-9]+$/.test(a)?t=parseInt(a.slice("#BPM=".length)):r.push.apply(r,a.split(" ")))}return function(e,t){for(var n=[],r=0;r<t.length;r++)for(var a=0;a<t[r].length;a++)for(var o=Number.parseInt(t[r].charAt(a)+"",16),i=0;i<4;i++)1==(o>>i&1)&&n.push({t:1e3+(4*r+a)*(6e4/e),type:i});return window.___chart=n,n}(t,r)}("\n#BPM=120\n2244 2244 1248 8421\n3c3c 9696 5a5a edb7\n0248 8420\n")}function t(e,t,a,o){for(var i=0,u=[a,o];i<u.length;i++){var s=u[i];s.width=e,s.height=t}var c=[a,o].map((function(e){return e.getContext("2d")})),l=c[0],f=c[1],h=function(e,t){return Math.floor(4*t/5)}(0,t),d={pause:!1,nextProcessLane:new Set},v={W:e,H:t,lineY:h,ctx2:f},p={scrollSpeed:1};l.fillRect(0,h-2,e,4),function(e,t,n,a){function o(e,t){for(var n=0;n<4;n++){var o=r(n,a),i=o[0],u=o[1];if(i<=e&&e<=i+u)return n}return null}for(var i=[["mousedown",function(e){e.preventDefault(),e.stopPropagation();var n=o(e.clientX,e.clientY);null!==n&&t(n)},{passive:!1}],["touchstart",function(e){e.preventDefault(),e.stopPropagation();for(var n=0,r=e.touches;n<r.length;n++){var a=r[n],i=o(a.clientX,a.clientY);null!==i&&t(i)}},{passive:!1}]],u=function(t,n,r){e.addEventListener(t,(function(e){return!d.pause&&n(e)}),r)},s=0,c=i;s<c.length;s++){var l=c[s];u(l[0],l[1],l[2])}}(o,(function(e){return d.nextProcessLane.add(e)}),0,v);var m={handleFrame:function(e,t,a){return function(e,t,a,o){for(var i=0,u=Array.from(t.values());i<u.length;i++)n(e,u[i]);t.clear(),function(e,t,n){var a=t.W,o=t.H,i=t.ctx2,u=t.lineY,s=n.scrollSpeed*o/1e3,c=e.chart,l=e.time,f=e.noteResults;i.clearRect(0,0,a,o),c.forEach((function(e,n){var a=e.t,o=e.type;if(void 0===f[n]){var c=u+(l-a)*s,h=r(o,t),d=h[0],v=h[1];0<=c&&c<=3e3&&i.fillRect(d,c-2,v,4)}}))}(e,a,o)}({chart:e,time:t,noteResults:a},d.nextProcessLane,v,p)},pause:function(e){return d.pause=e}};return m}function n(e,t){for(var n=e.chart,r=e.time,a=e.noteResults,o=0;o<n.length;o++){var i=Math.abs(r-n[o].t),u=void 0===a[o]&&i<108.442,s=n[o].type===t;if(u&&s){a[o]=0;break}}}function r(e,t){var n=t.W-100;return[50+n*e/4+5,n/4-5]}document.addEventListener("DOMContentLoaded",(function(){var n,r,a,o,i,u,s,c,l,f,h,d;n=window.location.href,a=(r=new URL(n)).searchParams.get("_"),o=Date.now(),(null===a||!/^\d+/.test(a)||Number(a)+3e4<o)&&(r.searchParams.set("_",o.toString()),window.location.href=r.href),c=t,l=window.innerHeight-10,f=window.innerWidth-10,h=document.querySelector("#canvas1"),d=document.querySelector("#canvas2"),i=c(f,l,h,d),u={pause:!0,offsetTime:-1,time:0,chart:e(),noteResults:{}},s=document.querySelector(".playbtn"),setInterval((function(){if(!u.pause){var e=Date.now()-u.offsetTime;u.time=e}var t,n;i.pause(u.pause),i.handleFrame(u.chart,u.time,u.noteResults),t=s,n=u.pause,t.dataset.pause===n.toString()||(t.dataset.pause=n,n?(t.innerHTML='<img src="lib/play-solid.svg">',["mousedown","touchstart"].forEach((function(e){t.firstElementChild.addEventListener(e,(function(){!function(e){e.pause=!1,e.offsetTime=Date.now()-e.time}(u)}))}))):(t.innerHTML='<img src="lib/pause-solid.svg">',["mousedown","touchstart"].forEach((function(e){t.firstElementChild.addEventListener(e,(function(){!function(e){e.pause=!0}(u)}))}))))}),1e3/60),window.state=u}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,